# @author: Khom
import cv2
import mediapipe as mp
import time

cap = cv2.VideoCapture(0)
# cap = cv2.VideoCapture(1)

mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils

pTime = 0  # previous time
cTime = 0  # current time

while True:
    success, img = cap.read()
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)
    # print(results.multi_hand_landmarks)  # check sth is detected or not

    if results.multi_hand_landmarks:
        for handLms in results.multi_hand_landmarks:
            # get info now each id has a corresponding landmark and landmark has x, y and z
            for id, lm in enumerate(handLms.landmark):
                print(id, lm)

            mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)

        cTime = time.time()
        fps = 1 / (cTime - pTime)
        pTime = cTime

        cv2.putText(img, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 3,
                    (255, 0, 255), 3)

    cv2.imshow("Image", img)
    cv2.waitKey(1)



===============================================================================

# get info now each id has a corresponding landmark and landmark has x, y and z

Following is the output how it looks like
they give the ratio of the image
So we multiply them with the width and height to get the pixel values.

0 x: 0.2709817886352539
y: 0.7166033983230591
z: -6.736120212735841e-07

1 x: 0.3342663049697876
y: 0.5403308868408203
z: -0.00492306100204587

2 x: 0.34157025814056396
y: 0.40769994258880615
z: -0.01900332421064377

3 x: 0.3338049650192261
y: 0.31450650095939636
z: -0.03931392729282379

4 x: 0.33335205912590027
y: 0.2608107328414917
z: -0.05443105474114418

5 x: 0.23240846395492554
y: 0.3042941689491272
z: -0.01607181690633297

6 x: 0.36867421865463257
y: 0.27929744124412537
z: -0.058471594005823135

7 x: 0.37896016240119934
y: 0.34995439648628235
z: -0.08392471075057983

8 x: 0.3471410274505615
y: 0.3724820911884308
z: -0.1020556390285492

9 x: 0.21756137907505035
y: 0.37150436639785767
z: -0.038077808916568756

10 x: 0.3826686143875122
y: 0.36941125988960266
z: -0.07712092995643616

11 x: 0.3745081126689911
y: 0.4332323670387268
z: -0.08746390789747238

12 x: 0.3330352008342743
y: 0.44747498631477356
z: -0.096530020236969

13 x: 0.22153478860855103
y: 0.4543958902359009
z: -0.06369016319513321

14 x: 0.3766939640045166
y: 0.4525490701198578
z: -0.09886453300714493

15 x: 0.36791008710861206
y: 0.5056659579277039
z: -0.09437596797943115

16 x: 0.33128243684768677
y: 0.5175925493240356
z: -0.09160079061985016

17 x: 0.23621073365211487
y: 0.5390406847000122
z: -0.09159071743488312

18 x: 0.35628408193588257
y: 0.5241387486457825
z: -0.11509499698877335

19 x: 0.35504141449928284
y: 0.5603013038635254
z: -0.11259463429450989

20 x: 0.32563358545303345
y: 0.5771312713623047
z: -0.10962899774312973

0 x: 0.2840236723423004
y: 0.6838617324829102
z: -5.329627015271399e-07

1 x: 0.3600684702396393
y: 0.5336778163909912
z: -0.007699900306761265

2 x: 0.39643996953964233
y: 0.3981940746307373
z: -0.023284075781702995

3 x: 0.43606340885162354
y: 0.306260347366333
z: -0.043049439787864685

4 x: 0.48308008909225464
y: 0.2414313107728958
z: -0.05693618953227997

5 x: 0.2882997393608093
y: 0.2892560362815857
z: -0.021586298942565918

6 x: 0.42300260066986084
y: 0.2875485122203827
z: -0.056308869272470474

7 x: 0.41545921564102173
y: 0.3553314507007599
z: -0.07571174949407578

8 x: 0.3843042850494385
y: 0.3694295883178711
z: -0.09227322041988373

9 x: 0.2695194184780121
y: 0.3523874878883362
z: -0.041403379291296005

10 x: 0.4272192120552063
y: 0.3706167936325073
z: -0.07872776687145233

11 x: 0.40340617299079895
y: 0.4304980933666229
z: -0.08904016017913818

12 x: 0.3642506003379822
y: 0.43489766120910645
z: -0.09904710203409195

13 x: 0.26827213168144226
y: 0.4324219822883606
z: -0.06384402513504028

14 x: 0.41633957624435425
y: 0.4490087628364563
z: -0.09399386495351791

15 x: 0.3911675810813904
y: 0.4988051652908325
z: -0.08758942782878876

16 x: 0.35250115394592285
y: 0.5011414885520935
z: -0.08516637980937958

17 x: 0.2776627838611603
y: 0.5143675208091736
z: -0.08894114941358566

18 x: 0.3936237096786499
y: 0.5144437551498413
z: -0.10858424007892609

19 x: 0.38057711720466614
y: 0.5490604639053345
z: -0.10608014464378357

20 x: 0.34692394733428955
y: 0.5549675822257996
z: -0.10465875267982483

________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________

# @author: Khom
import cv2
import mediapipe as mp
import time

cap = cv2.VideoCapture(0)
# cap = cv2.VideoCapture(1)

mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils

pTime = 0  # previous time
cTime = 0  # current time

while True:
    success, img = cap.read()
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)
    # print(results.multi_hand_landmarks)  # check sth is detected or not

    if results.multi_hand_landmarks:
        for handLms in results.multi_hand_landmarks:
            # get info now each id has a corresponding landmark and landmark has x, y and z
            for id, lm in enumerate(handLms.landmark):
                print(id, lm)
                h, w, c  = img.shape  # height, weight and channels of the image
                cx, cy = int(lm.x*w), int(lm.y*h)  # find the position of the center
                print(cx, cy)

            mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)

        cTime = time.time()
        fps = 1 / (cTime - pTime)
        pTime = cTime

        cv2.putText(img, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 3,
                    (255, 0, 255), 3)

    cv2.imshow("Image", img)
    cv2.waitKey(1)

===============================================================================

O/P:

296 112
0 x: 0.3705369234085083
y: 0.8607169389724731
z: 6.360783117997926e-07

237 413
1 x: 0.46430322527885437
y: 0.8144040107727051
z: -0.028347590938210487

297 390
2 x: 0.5488060116767883
y: 0.7046365737915039
z: -0.03849683701992035

351 338
3 x: 0.6081788539886475
y: 0.6216089129447937
z: -0.04911959916353226

389 298
4 x: 0.6594814658164978
y: 0.5635813474655151
z: -0.05837856978178024

422 270
5 x: 0.5057423114776611
y: 0.531890332698822
z: -0.0161550622433424

323 255
6 x: 0.5615885853767395
y: 0.38693416118621826
z: -0.05321180820465088

359 185
7 x: 0.609786868095398
y: 0.32969754934310913
z: -0.08372683078050613

390 158
8 x: 0.6554429531097412
y: 0.30091026425361633
z: -0.10103897005319595

419 144
9 x: 0.45829614996910095
y: 0.5026484727859497
z: -0.024276871234178543

293 241
10 x: 0.504005491733551
y: 0.33090323209762573
z: -0.051178768277168274

322 158
11 x: 0.5483031868934631
y: 0.22745078802108765
z: -0.07606235146522522

350 109
12 x: 0.5918073058128357
y: 0.1558607816696167
z: -0.09239529818296432

378 74
13 x: 0.40955525636672974
y: 0.5049997568130493
z: -0.038540925830602646

262 242
14 x: 0.4468933939933777
y: 0.3490447998046875
z: -0.06537517160177231

286 167
15 x: 0.48898446559906006
y: 0.2569118142127991
z: -0.08445495367050171

312 123
16 x: 0.5333644151687622
y: 0.1922321617603302
z: -0.09605497121810913

341 92
17 x: 0.3564614951610565
y: 0.5331449508666992
z: -0.056318849325180054

228 255
18 x: 0.37956416606903076
y: 0.41933155059814453
z: -0.07981384545564651

242 201
19 x: 0.4109398424625397
y: 0.35292211174964905
z: -0.08640668541193008

263 169
20 x: 0.44850122928619385
y: 0.30476096272468567
z: -0.08856620639562607

287 146
0 x: 0.36522355675697327
y: 0.9601287841796875
z: 7.78578737481439e-07

233 460
1 x: 0.44310879707336426
y: 0.9361107349395752
z: -0.04399137943983078

283 449
2 x: 0.4978090226650238
y: 0.8330918550491333
z: -0.06435324251651764

318 399
3 x: 0.5191612243652344
y: 0.7300963997840881
z: -0.07721692323684692

332 350
4 x: 0.5347276926040649
y: 0.650238573551178
z: -0.090378038585186

342 312
5 x: 0.4609479606151581
y: 0.7512121796607971
z: -0.05936053395271301

295 360
6 x: 0.4811071455478668
y: 0.6324512362480164
z: -0.09692643582820892

307 303
7 x: 0.49802830815315247
y: 0.5400545001029968
z: -0.12225395441055298

318 259
8 x: 0.5138953328132629
y: 0.4739064574241638
z: -0.13669303059577942

328 227
9 x: 0.411685585975647
y: 0.7325472831726074
z: -0.051587142050266266

263 351
10 x: 0.4309110641479492
y: 0.6137680411338806
z: -0.08339574933052063

275 294
11 x: 0.4483642280101776
y: 0.5219858884811401
z: -0.10255513340234756

286 250
12 x: 0.46599167585372925
y: 0.4476715326309204
z: -0.11421851813793182

298 214
13 x: 0.36837148666381836
y: 0.7307006120681763
z: -0.047423575073480606

235 350
14 x: 0.38328152894973755
y: 0.6225707530975342
z: -0.07523096352815628

245 298
15 x: 0.40496543049812317
y: 0.5429942607879639
z: -0.08476433157920837

259 260
16 x: 0.426723450422287
y: 0.4781149923801422
z: -0.08883669227361679

273 229
17 x: 0.32845616340637207
y: 0.7452332377433777
z: -0.04672851413488388

210 357
18 x: 0.3411029279232025
y: 0.6584723591804504
z: -0.06887640804052353

218 316
19 x: 0.3523937463760376
y: 0.594784140586853
z: -0.07388386875391006

225 285
20 x: 0.36578625440597534
y: 0.5443195104598999
z: -0.07478996366262436

234 261


________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________


# @author: Khom
import cv2
import mediapipe as mp
import time

cap = cv2.VideoCapture(0)
# cap = cv2.VideoCapture(1)

mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils

pTime = 0  # previous time
cTime = 0  # current time

while True:
    success, img = cap.read()
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)
    # print(results.multi_hand_landmarks)  # check sth is detected or not

    if results.multi_hand_landmarks:
        for handLms in results.multi_hand_landmarks:
            # get info now each id has a corresponding landmark and landmark has x, y and z
            for id, lm in enumerate(handLms.landmark):
                print(id, lm)
                h, w, c  = img.shape  # height, weight and channels of the image
                cx, cy = int(lm.x*w), int(lm.y*h)  # find the position of the center
                print(id, cx, cy)

            mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)

        cTime = time.time()
        fps = 1 / (cTime - pTime)
        pTime = cTime

        cv2.putText(img, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 3,
                    (255, 0, 255), 3)

    cv2.imshow("Image", img)
    cv2.waitKey(1)
===============================================================================
O/P:
0 x: 0.31830134987831116
y: 0.832374095916748
z: 6.247863666430931e-07

0 203 399
1 x: 0.39444372057914734
y: 0.7911477088928223
z: -0.03752492740750313

1 252 379
2 x: 0.4470241963863373
y: 0.6874616742134094
z: -0.05082404613494873

2 286 329
3 x: 0.47752130031585693
y: 0.5924571752548218
z: -0.060176167637109756

3 305 284
4 x: 0.5107612013816833
y: 0.5292816162109375
z: -0.06873273849487305

4 326 254
5 x: 0.38924646377563477
y: 0.5474581718444824
z: -0.027691077440977097

5 249 262
6 x: 0.4049869179725647
y: 0.4396032691001892
z: -0.050910476595163345

6 259 211
7 x: 0.41669905185699463
y: 0.37279948592185974
z: -0.07073553651571274

7 266 178
8 x: 0.4267042875289917
y: 0.31854167580604553
z: -0.0851394459605217

8 273 152
9 x: 0.33388692140579224
y: 0.5317347645759583
z: -0.02762988768517971

9 213 255
10 x: 0.33523738384246826
y: 0.39763855934143066
z: -0.04789537936449051

10 214 190
11 x: 0.33992281556129456
y: 0.31315428018569946
z: -0.06629302352666855

11 217 150
12 x: 0.34417396783828735
y: 0.24324801564216614
z: -0.07864580303430557

12 220 116
13 x: 0.2818901240825653
y: 0.5451434254646301
z: -0.032588209956884384

13 180 261
14 x: 0.275073379278183
y: 0.4149360656738281
z: -0.05654652789235115

14 176 199
15 x: 0.2740892171859741
y: 0.33113130927085876
z: -0.07516417652368546

15 175 158
16 x: 0.2765791416168213
y: 0.2597486078739166
z: -0.0865371897816658

16 177 124
17 x: 0.2320573925971985
y: 0.5853802561759949
z: -0.040659282356500626

17 148 280
18 x: 0.20399923622608185
y: 0.49143242835998535
z: -0.06521789729595184

18 130 235
19 x: 0.18988583981990814
y: 0.42919737100601196
z: -0.07690583169460297

19 121 206
20 x: 0.18187592923641205
y: 0.3698786497116089
z: -0.08298823982477188

20 116 177
0 x: 0.3276549279689789
y: 0.8520550727844238
z: 6.340557092698873e-07

0 209 408
1 x: 0.4081345796585083
y: 0.7990393042564392
z: -0.03766842186450958

1 261 383
2 x: 0.4648258090019226
y: 0.6991204619407654
z: -0.054926808923482895

2 297 335
3 x: 0.5009865760803223
y: 0.60865718126297
z: -0.06994911283254623

3 320 292
4 x: 0.542823314666748
y: 0.5486860275268555
z: -0.08406572043895721

4 347 263
5 x: 0.4073912501335144
y: 0.5452725887298584
z: -0.02478439174592495

5 260 261
6 x: 0.4279380738735199
y: 0.44138815999031067
z: -0.05455964803695679

6 273 211
7 x: 0.443741112947464
y: 0.3759080469608307
z: -0.08090106397867203

7 283 180
8 x: 0.45836931467056274
y: 0.3211110532283783
z: -0.09914522618055344

8 293 154
9 x: 0.34967049956321716
y: 0.5260558128356934
z: -0.02780170552432537

9 223 252
10 x: 0.3459569215774536
y: 0.3864274322986603
z: -0.052158989012241364

10 221 185
11 x: 0.3500177264213562
y: 0.2972351312637329
z: -0.0737277939915657

11 224 142
12 x: 0.3546346426010132
y: 0.2222733199596405
z: -0.08797839283943176

12 226 106
13 x: 0.2982753813266754
y: 0.5405848622322083
z: -0.03654402121901512

13 190 259
14 x: 0.2879416048526764
y: 0.4089395999908447
z: -0.06272576749324799

14 184 196
15 x: 0.28964126110076904
y: 0.32461920380592346
z: -0.08064072579145432

15 185 155
16 x: 0.29574820399284363
y: 0.25082048773765564
z: -0.09121160954236984

16 189 120
17 x: 0.25105834007263184
y: 0.5837247371673584
z: -0.04902610555291176

17 160 280
18 x: 0.22755461931228638
y: 0.49030348658561707
z: -0.07300759106874466

18 145 235
19 x: 0.21913772821426392
y: 0.42727434635162354
z: -0.08229239284992218

19 140 205
20 x: 0.2157725691795349
y: 0.3675382435321808
z: -0.08660396933555603

20 138 176
0 x: 0.3391943871974945
y: 0.8610011339187622
z: 5.936375373494229e-07

0 217 413


________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________
# detecting landmark=0
# @author: Khom
import cv2
import mediapipe as mp
import time

cap = cv2.VideoCapture(0)
# cap = cv2.VideoCapture(1)

mpHands = mp.solutions.hands
hands = mpHands.Hands()
mpDraw = mp.solutions.drawing_utils

pTime = 0  # previous time
cTime = 0  # current time

while True:
    success, img = cap.read()
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)
    # print(results.multi_hand_landmarks)  # check sth is detected or not

    if results.multi_hand_landmarks:
        for handLms in results.multi_hand_landmarks:
            # get info now each id has a corresponding landmark and landmark has x, y and z
            for id, lm in enumerate(handLms.landmark):
                # print(id, lm)
                h, w, c  = img.shape  # height, weight and channels of the image
                cx, cy = int(lm.x*w), int(lm.y*h)  # find the position of the center
                print(id, cx, cy)
                if id == 0:
                    cv2.circle(img, (cx, cy), 25, (255, 0, 255), cv2.FILLED)

            mpDraw.draw_landmarks(img, handLms, mpHands.HAND_CONNECTIONS)

        cTime = time.time()
        fps = 1 / (cTime - pTime)
        pTime = cTime

        cv2.putText(img, str(int(fps)), (10, 70), cv2.FONT_HERSHEY_PLAIN, 3,
                    (255, 0, 255), 3)

    cv2.imshow("Image", img)
    cv2.waitKey(1)

===============================================================================
O/P:

0 228 387
1 261 381
2 287 362
3 297 334
4 297 312
5 262 354
6 270 332
7 276 317
8 282 305
9 243 345
10 250 324
11 258 307
12 266 294
13 226 337
14 233 316
15 242 299
16 251 287
17 209 331
18 214 310
19 221 295
20 230 284
0 227 380
1 261 371
2 285 350
3 294 322
4 295 299
5 263 344
6 270 319
7 274 303
8 278 290
9 244 336
10 248 312
11 255 294
12 262 280
13 226 328
14 231 305
15 239 287
16 247 274
17 210 322
18 212 300
19 219 285
20 227 273

________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________


